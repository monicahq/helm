image:
  repository: ghcr.io/monicahq/monica-next
  tag: main
  # repository: monica
  # tag: 5.0-apache
  pullPolicy: IfNotPresent
  # pullSecrets:
  #   - myRegistrKeySecretName

nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podLabels: {}
deploymentAnnotations: {}

# Number of replicas to be deployed
replicaCount: 1

## Allowing use of ingress controllers
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  # className: nginx
  annotations: {}
  #  nginx.ingress.kubernetes.io/proxy-body-size: 4G
  #  kubernetes.io/tls-acme: "true"
  #  cert-manager.io/cluster-issuer: letsencrypt-prod
  #  nginx.ingress.kubernetes.io/server-snippet: |-
  #    server_tokens off;
  #    proxy_hide_header X-Powered-By;
  #    location = /.well-known/carddav {
  #      return 301 $scheme://$host/dav;
  #    }
  #    location = /.well-known/caldav {
  #      return 301 $scheme://$host/dav;
  #    }
  #    location = /.well-known/security.txt {
  #      return 301 $scheme://$host/security.txt;
  #    }
  #    location = /robots.txt {
  #      allow all;
  #      log_not_found off;
  #      access_log off;
  #    }
  #  tls:
  #    - secretName: monica-tls
  #      hosts:
  #        - monica.kube.home
  labels: {}
  path: /
  pathType: Prefix


# Allow configuration of lifecycle hooks
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
lifecycle: {}
  # postStartCommand: []
  # preStopCommand: []

monica:
  host: monica.kube.home
  ## Use an existing secret
  existingSecret:
    enabled: false
    # secretName: nameofsecret
    # appKey: base64_key
    # mailUsernameKey: smtp_username
    # mailPasswordKey: smtp_password
  # If web server is not binding default port, you can define it
  # containerPort: 80
  storagedir: /var/www/html/storage
  mail:
    enabled: false
    fromAddress: user
    replyToAddress: user
    smtp:
      host: domain.com
      encryption: tls
      port: 465
      username: user
      password: pass
  # PHP Configuration files
  # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
  phpConfigs: {}

  ## Strategy used to replace old pods
  ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: Recreate
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 1
    #   maxUnavailable: 0

  ##
  ## Extra environment variables
  extraEnv:
  #  - name: SOME_SECRET_ENV
  #    valueFrom:
  #      secretKeyRef:
  #        name: monica
  #        key: secret_key

  # Extra init containers that runs before pods start.
  extraInitContainers: []
  #  - name: do-something
  #    image: busybox
  #    command: ['do', 'something']

  # Extra sidecar containers.
  extraSidecarContainers: []
  #  - name: monica-logger
  #    image: busybox
  #    command: [/bin/sh, -c, 'while ! test -f "/run/monica/data/monica.log"; do sleep 1; done; tail -n+1 -f /run/monica/data/monica.log']
  #    volumeMounts:
  #      - name: monica-storage
  #        mountPath: /run/monica/data

  # Extra mounts for the pods.
  extraVolumes:
  #  - name: nfs
  #    nfs:
  #      server: "10.0.0.1"
  #      path: "/var/www/html/storage"
  #      readOnly: false
  extraVolumeMounts:
  #  - name: nfs
  #    mountPath: "/var/www/html/storage"

  # Extra secuurityContext parameters. For example you may need to define runAsNonRoot directive
  # extraSecurityContext:
  #   runAsUser: "33"
  #   runAsGroup: "33"
  #   runAsNonRoot: true
  #   readOnlyRootFilesystem: true

  ##
  ## Cronjob to execute monica scheduled tasks
  ##
  cronjob:
    enabled: false

    # Allow configuration of lifecycle hooks
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
    lifecycle: {}
      # postStartCommand: []
      # preStopCommand: []

  ##
  ## queue job to execute monica background tasks
  ##  Use in addition to a `QUEUE_CONNECTION` variable
  ##
  queue:
    enabled: false

    # Allow configuration of lifecycle hooks
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
    lifecycle: {}
      # postStartCommand: []
      # preStopCommand: []

nginx:
  ## You need to set an fpm version of the image for monica if you want to use nginx!
  enabled: false
  image:
    repository: nginx
    tag: alpine
    pullPolicy: IfNotPresent

  containerPort: 80
  config:
    # This generates the default nginx config
    default: true
    # custom: |-
    #     worker_processes  1;..

  resources: {}

##
## Internal database configuration (SQLite)
##
internalDatabase:
  enabled: true
  ## Database fullpath file
  name: /var/www/html/database/monica.sqlite

##
## External database configuration
##
externalDatabase:
  enabled: false

  ## Supported database engines: mysql or postgresql
  type: mysql

  ## Database host
  host:

  ## Database user
  user: monica

  ## Database password
  password: secret

  ## Database name
  database: monica

  ## Use an existing secret
  existingSecret:
    enabled: false
    # secretName: nameofsecret
    # usernameKey: username
    # passwordKey: password

##
## MariaDB chart configuration
## for more options see https://github.com/bitnami/charts/tree/master/bitnami/mariadb
##
mariadb:
  ## Whether to deploy a mariadb server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  enabled: false

  auth:
    database: monica
    username: monica
    password: secret

  architecture: standalone

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  primary:
    persistence:
      enabled: false
      # storageClass: ""
      accessMode: ReadWriteOnce
      size: 8Gi

##
## PostgreSQL chart configuration
## for more options see https://github.com/bitnami/charts/tree/master/bitnami/postgresql
##
postgresql:
  enabled: false
  global:
    postgresql:
      auth:
        username: monica
        password: secret
        database: monica
  primary:
    persistence:
      enabled: false
      # storageClass: ""

##
## Redis chart configuration
## for more options see https://github.com/bitnami/charts/tree/master/bitnami/redis
##
redis:
  enabled: false
  auth:
    enabled: true
    password: secret
    # existingSecret
    # existingSecretPasswordKey

##
## Memcached chart configuration
## for more options see https://github.com/bitnami/charts/tree/main/bitnami/memcached
##
memcached:
  enabled: false
  auth:
    enabled: true
    username: monica
    password: secret
    # existingSecret
    # existingSecretPasswordKey
  containerSecurityContext:
    readOnlyRootFilesystem: false

##
## Meilisearch chart configuration
## for more options see https://github.com/meilisearch/meilisearch-kubernetes/tree/main/charts/meilisearch
##
meilisearch:
  enabled: false
  environment:
    MEILI_ENV: production
    # MEILI_MASTER_KEY
  # auth:
  #   existingMasterKeySecret

service:
  type: ClusterIP
  port: 8080
  loadBalancerIP: ""
  nodePort:
  annotations: {}
    ## Insert your annotations such as below
    # test/test: pumuckel

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  # monica storage (/var/www/html/storage)
  enabled: false
  annotations: {}
  ## monica storage Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner. (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  accessMode: ReadWriteOnce
  size: 4Gi

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


## Liveness and readiness probe values
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1


## Enable pod autoscaling using HorizontalPodAutoscaler
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
##
hpa:
  enabled: false
  cputhreshold: 60
  minPods: 1
  maxPods: 10

nodeSelector: {}

tolerations: []

affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

tests:
  unitTests:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
